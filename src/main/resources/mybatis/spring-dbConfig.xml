<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 初始化dbcp连接池 使用jdbc操作数据库 不是mybatis -->
	<bean id="JdbcDataSource"
		class="top.linjt.java_learning.jdbc.connection.DataSourceFactory"
		factory-method="createDataSource">
		<constructor-arg name="dirveClass"
			value="top.linjt.java_learning.jdbc.connection.DBCPUtil"></constructor-arg>
		<!-- dbcp的时候用的到 -->
		<constructor-arg name="configFile" value="/mybatis/dataSource/dbcp.properties"></constructor-arg>
	</bean>


<!-- 	读取配置文件,使其他bean可以使用el 表达式获取值 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/mybatis/dataSource/c3p0.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

<!-- c3p0连接池, 通过读取配置文件加载参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driverClass}"></property>
		<property name="jdbcUrl" value = "${c3p0.jdbcUrl}"></property>
		<property name="user" value = "${c3p0.user}" ></property>
		<property name="password" value = "${c3p0.password}"></property>
	</bean>

	<!-- 需要在容器的配置文件中配置JDNI content.xml server.xml 等  
	JDNI 对象会在服务器启动时初始化 当工厂类 org.springframework.jndi.JndiObjectFactoryBean 
		初始化时会调用 接口:InitializingBean 中的afterPropertiesSet方法初始化实例,
		然后通过调用 factroyBean 的 getObject() 获取到jndi的实例  -->
<!-- 	<bean id="commonDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName"> -->
<!-- 			<value>java:comp/env/weChat</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--<property name="dataSource" ref="commonDataSource" />-->
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value ="classpath:top/linjt/java_learning/mybatis/weChat/mapper/*.xml"></property>
		<property name="configLocation" value = "classpath:mybatis/configuration.xml"></property>
	</bean>
	
	<!-- 配置MapperScanner , 使spring在启动时扫描对应的mapper包下的映射文件,并注入到引用的地方,类似于Dao的注入  -->
	<bean id="scanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value ="top.linjt.java_learning.mybatis.weChat.mapper"></property>
	</bean>

	<!-- 	事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="test*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.RuntimeException" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.Exception" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!--  aop-->
    <aop:config>
        <aop:pointcut id="pc"
            expression="execution(public * top.linjt.*..service.*.*(..))" /> <!--把事务控制在Service层 -->
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
    </aop:config>
</beans>