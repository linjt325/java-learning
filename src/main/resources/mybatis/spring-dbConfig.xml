<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 初始化dbcp连接池 使用jdbc操作数据库 不是mybatis -->
	<bean id="JdbcDataSource"
		class="top.linjt.java_learning.jdbc.connection.DataSourceFactory"
		factory-method="createDataSource" >
		<constructor-arg name="driveClass"
			value="top.linjt.java_learning.jdbc.connection.DBCPUtil"/>
		<!-- dbcp的时候用的到 -->
		<constructor-arg name="configFile"
			value="/mybatis/dataSource/dbcp.properties"></constructor-arg>
	</bean>


	<!-- 读取配置文件,使其他bean可以使用el 表达式获取值 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/mybatis/dataSource/c3p0.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!-- c3p0连接池, 通过读取配置文件加载参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driverClass}"></property>
		<property name="jdbcUrl" value="${c3p0.jdbcUrl}"></property>
		<property name="user" value="${c3p0.user}"></property>
		<property name="password" value="${c3p0.password}"></property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="500" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出-->  
 <!--SQLEXCEPTION，如果设置0，则无限等待。Default:0-->  
 <property name="checkoutTimeout" value="100" />  
	</bean>

	<!-- 需要在容器的配置文件中配置JDNI content.xml server.xml 等 JDNI 对象会在服务器启动时初始化 当工厂类 
		org.springframework.jndi.JndiObjectFactoryBean 初始化时会调用 接口:InitializingBean 
		中的afterPropertiesSet方法初始化实例, 然后通过调用 factroyBean 的 getObject() 获取到jndi的实例 -->
	<!-- <bean id="commonDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
	<!-- <property name="jndiName"> -->
	<!-- <value>java:comp/env/weChat</value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--<property name="dataSource" ref="commonDataSource" /> -->
		<property name="dataSource" ref="dataSource" />
		<!-- mapper.xml 配置文件所在路径,不用再configuration.xml中配置mapper元素了 -->
		<property name="mapperLocations"
			value="classpath:top/linjt/java_learning/mybatis/weChat/mapper/*.xml"></property>
		<!-- mybatis 配置文件 -->
		<property name="configLocation" value="classpath:mybatis/configuration.xml"></property>
	</bean>

	<!-- 配置MapperScanner , 使spring在启动时扫描对应的mapper包下的映射文件,并注入到引用的地方,类似于Dao的注入 -->
	<bean id="scanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="top.linjt.java_learning.mybatis.weChat.mapper"></property>
	</bean>

	<!-- 开启事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="test*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<!-- aop -->
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * top.linjt.*..service.*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
</beans>